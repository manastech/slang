{% macro render_builder(language) -%}
  {%- set builder = model.ir_languages[language].builder -%}
  #![allow(clippy::too_many_lines)]

  use std::rc::Rc;

  #[allow(clippy::wildcard_imports)]
  use super::nodes::*;
  use crate::cst::{
    EdgeLabel, NodeKind, NonterminalKind, SyntaxNode, TerminalKind, TerminalNode,
  };

  //
  // Sequences:
  //

  {% for parent_type, sequence in builder.sequences %}
    {% if not sequence.has_added_fields %}
      pub fn build_{{ parent_type | snake_case }}(node: &Rc<SyntaxNode>) -> Option<{{ parent_type }}>
      {
        assert_nonterminal_kind(node, NonterminalKind::{{ parent_type }});
        let mut helper = ChildrenHelper::new(node.children());
        {% for field in sequence.fields %}
          {%- if field.is_removed -%}
            _ = helper.accept_label(EdgeLabel::{{ field.label | pascal_case }})?;
          {%- elif field.is_optional -%}
            let {{ field.label }} =
              {%- if field.is_terminal -%}
                helper.accept_label(EdgeLabel::{{ field.label | pascal_case }}).map(terminal_node_cloned)
              {%- else -%}
                helper.accept_label(EdgeLabel::{{ field.label | pascal_case }}).and_then(|node|
                  build_{{ field.type | snake_case }}(node)
                )
              {%- endif -%}
            ;
          {%- else -%}
            let {{ field.label }} =
            {%- if field.is_terminal -%}
              terminal_node_cloned(helper.accept_label(EdgeLabel::{{ field.label | pascal_case }})?);
            {%- else -%}
              build_{{ field.type | snake_case }}(
                helper.accept_label(EdgeLabel::{{ field.label | pascal_case }})?,
              )?;
            {%- endif -%}
          {%- endif -%}
        {%- endfor %}
        if !helper.finalize() {
          return None;
        }

        Some(Rc::new({{ parent_type }}Struct {
          node: Rc::clone(node),
          {%- for field in sequence.fields -%}
            {%- if not field.is_removed -%}
              {{ field.label }},
            {%- endif -%}
          {%- endfor %}
        }))
      }
    {% endif %}
  {% endfor %}

  //
  // Choices:
  //

  {% for parent_type, choice in builder.choices %}
    pub fn build_{{ parent_type | snake_case }}(node: &Rc<SyntaxNode>) -> Option<{{ parent_type }}> {
      assert_nonterminal_kind(node, NonterminalKind::{{ parent_type }});
      let mut helper = ChildrenHelper::new(node.children());
      let variant = helper.accept_label(EdgeLabel::Variant)?;
      let item = match variant.kind() {
        {% for type in choice.nonterminal_types -%}
          NodeKind::Nonterminal(NonterminalKind::{{ type }}) => {{ parent_type }}::{{ type }}(build_{{ type | snake_case }}(variant)?),
        {%- endfor -%}

        {% for type in choice.non_unique_terminal_types -%}
          NodeKind::Terminal(TerminalKind::{{ type }}) => {
            {{ parent_type }}::{{ type }}(terminal_node_cloned(variant))
          },
        {%- endfor -%}

        {% for type in choice.unique_terminal_types -%}
          NodeKind::Terminal(TerminalKind::{{ type }}) => {
            {{ parent_type }}::{{ type }}
          },
        {%- endfor -%}

        NodeKind::Nonterminal(_) | NodeKind::Terminal(_) => {
          unreachable!("unexpected variant node of kind {kind}", kind = variant.kind());
        }
      };
      if !helper.finalize() {
        return None;
      }
      Some(item)
    }

  {% endfor %}

  //
  // Repeated & Separated
  //

  {% for parent_type, collection in builder.collections %}
    pub fn build_{{ parent_type | snake_case }}(node: &Rc<SyntaxNode>) -> Option<{{ parent_type }}> {
      assert_nonterminal_kind(node, NonterminalKind::{{ parent_type }});
      let mut items = {{ parent_type }}::new();
      let mut helper = ChildrenHelper::new(node.children());
      while let Some(child) = helper.accept_label(EdgeLabel::Item) {
        {%- if collection.is_terminal -%}
          items.push(terminal_node_cloned(child));
        {%- else -%}
          if let Some(item) = build_{{ collection.item_type | snake_case }}(child) {
            items.push(item);
          }
        {%- endif -%}
        _ = helper.accept_label(EdgeLabel::Separator);
      }
      if !helper.finalize() {
        return None;
      }
      Some(items)
    }
  {% endfor %}

  //
  // Common:
  //

  #[allow(dead_code)]
  #[inline]
  fn assert_nonterminal_kind(node: &Rc<SyntaxNode>, kind: NonterminalKind) {
    assert_eq!(node.kind(), NodeKind::Nonterminal(kind), "expected non-terminal of kind {kind}, got {node:?}");
  }

  #[allow(dead_code)]
  #[inline]
  fn terminal_node_cloned(node: &Rc<SyntaxNode>) -> Rc<TerminalNode> {
    node.as_terminal().map(Rc::clone).expect("expected terminal node")
  }

  struct ChildrenHelper {
    children: Vec<Rc<SyntaxNode>>,
    index: usize,
  }

  impl ChildrenHelper {
    fn new(children: Vec<Rc<SyntaxNode>>) -> Self {
      let mut index = 0;
      while index < children.len() {
        if !children[index].is_trivia() && children[index].is_valid() {
          break;
        }
        index += 1;
      }
      Self { children, index }
    }

    fn accept_label(&mut self, label: EdgeLabel) -> Option<&Rc<SyntaxNode>> {
      if self.index >= self.children.len() || self.children[self.index].label() != label {
        return None;
      }

      let node = &self.children[self.index];
      loop {
        self.index += 1;
        if self.index >= self.children.len() ||
          (!self.children[self.index].is_trivia() && self.children[self.index].is_valid()) {
          break;
        }
      }
      Some(node)
    }

    fn finalize(mut self) -> bool {
      // skip over trailing trivia and unrecognized nodes
      while self.index < self.children.len() {
        if !self.children[self.index].is_trivia() && self.children[self.index].is_valid() {
          return false;
        }
        self.index += 1;
      }
      true
    }
  }

{% endmacro render_builder %}
